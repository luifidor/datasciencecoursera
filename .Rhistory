colnames(r[,c(7,2,outcome_id)]) <- c("State", "Hospital", "Rate")
r[,c(7,2,outcome_id,47,48)]
#r[,c(7,2,outcome_id)]
}
r<- rankall("heart failure", "all")
r[r$State =="WV",]
rankall <- function(outcome, num) {
## Read outcome data
## Check that state and outcome are valid
## Return hospital name is tha tstate with lowest 30 day death
## rate
# "heart attack" , "heart failure" and "pneumonia"
outcome_id = NULL
# check if outcome measure is valid
if (outcome == "heart attack") {
outcome_id = 11
} else if (outcome == "heart failure") {
outcome_id = 17
} else if ( outcome == "pneumonia") {
outcome_id = 23
} else {
stop ("Not a valid outcome measure")
}
# load relevant data
data <- read.csv("\\\\wbad.group\\dfs_WB\\10_Home\\UWBBENOELF\\DATA\\Desktop\\GIT Folder\\coursera\\coursera\\outcome-of-care-measures.csv", colClasses = "character")
suppressWarnings(data[,outcome_id] <- as.numeric(data[,outcome_id]))
# check if state is valid
if (is.na(match(state, data[,7]))) {
stop ("Not a valid state")
}
#filter by state and order the data ascending
data <- data[complete.cases(data[,outcome_id]),]
f_states <- levels(factor(data$State))
r <- NULL
for (s in f_states) {
t <- data[data$State == s,]
rank_v = order(t[,outcome_id])
rev_v = order(t[,outcome_id], decreasing = TRUE)
t <- cbind(t[rank_v,], rank = 1:length(rank_v), length(rev_V):1)
if (is.null(r)) {
r <- t
} else {
r <- rbind(r, t)
}
}
#r[,c(7,2,outcome_id,47,48)]
#return results
if (num == "best") {
r <- r[r$rank == 1, ]
} else if (num == "worst") {
r <- r[r$reverse == 1, ]
} else if (num == "all") {
} else {
r <- r[r$rank == as.numeric(num), ]
}
colnames(r[,c(7,2,outcome_id)]) <- c("State", "Hospital", "Rate")
r[,c(7,2,outcome_id,47,48)]
#r[,c(7,2,outcome_id)]
}
r<- rankall("heart failure", "all")
rankall <- function(outcome, num) {
## Read outcome data
## Check that state and outcome are valid
## Return hospital name is tha tstate with lowest 30 day death
## rate
# "heart attack" , "heart failure" and "pneumonia"
outcome_id = NULL
# check if outcome measure is valid
if (outcome == "heart attack") {
outcome_id = 11
} else if (outcome == "heart failure") {
outcome_id = 17
} else if ( outcome == "pneumonia") {
outcome_id = 23
} else {
stop ("Not a valid outcome measure")
}
# load relevant data
data <- read.csv("\\\\wbad.group\\dfs_WB\\10_Home\\UWBBENOELF\\DATA\\Desktop\\GIT Folder\\coursera\\coursera\\outcome-of-care-measures.csv", colClasses = "character")
suppressWarnings(data[,outcome_id] <- as.numeric(data[,outcome_id]))
# check if state is valid
if (is.na(match(state, data[,7]))) {
stop ("Not a valid state")
}
#filter by state and order the data ascending
data <- data[complete.cases(data[,outcome_id]),]
f_states <- levels(factor(data$State))
r <- NULL
for (s in f_states) {
t <- data[data$State == s,]
rank_v = order(t[,outcome_id])
rev_v = order(t[,outcome_id], decreasing = TRUE)
t <- cbind(t[rank_v,], rank = 1:length(rank_v), length(rank_v):1)
if (is.null(r)) {
r <- t
} else {
r <- rbind(r, t)
}
}
#r[,c(7,2,outcome_id,47,48)]
#return results
if (num == "best") {
r <- r[r$rank == 1, ]
} else if (num == "worst") {
r <- r[r$reverse == 1, ]
} else if (num == "all") {
} else {
r <- r[r$rank == as.numeric(num), ]
}
colnames(r[,c(7,2,outcome_id)]) <- c("State", "Hospital", "Rate")
r[,c(7,2,outcome_id,47,48)]
#r[,c(7,2,outcome_id)]
}
r<- rankall("heart failure", "all")
r[r$State =="WV",]
best("SC", "heart attack")
best("NY", "pneumonia")
best("AK", "pneumonia")
rankhospital("NC", "heart attack", "worst")
rankhospital("WA", "heart attack", 7)
rankhospital("TX", "pneumonia", 10)
rankhospital("NY", "heart attack", 7)
r <- rankall("heart attack", 4)
as.character(subset(r, state == "HI")$hospital)
r <- rankall("heart attack", 4)
r[r$State =="HI",]
rankall <- function(outcome, num) {
## Read outcome data
## Check that state and outcome are valid
## Return hospital name is tha tstate with lowest 30 day death
## rate
# "heart attack" , "heart failure" and "pneumonia"
outcome_id = NULL
# check if outcome measure is valid
if (outcome == "heart attack") {
outcome_id = 11
} else if (outcome == "heart failure") {
outcome_id = 17
} else if ( outcome == "pneumonia") {
outcome_id = 23
} else {
stop ("Not a valid outcome measure")
}
# load relevant data
data <- read.csv("\\\\wbad.group\\dfs_WB\\10_Home\\UWBBENOELF\\DATA\\Desktop\\GIT Folder\\coursera\\coursera\\outcome-of-care-measures.csv", colClasses = "character")
suppressWarnings(data[,outcome_id] <- as.numeric(data[,outcome_id]))
# check if state is valid
if (is.na(match(state, data[,7]))) {
stop ("Not a valid state")
}
#filter by state and order the data ascending
data <- data[complete.cases(data[,outcome_id]),]
f_states <- levels(factor(data$State))
r <- NULL
for (s in f_states) {
t <- data[data$State == s,]
rank_v = order(t[,outcome_id])
t <- cbind(t[rank_v,], rank = 1:length(rank_v), length(rank_v):1)
if (is.null(r)) {
r <- t
} else {
r <- rbind(r, t)
}
}
#r[,c(7,2,outcome_id,47,48)]
#return results
if (num == "best") {
r <- r[r$rank == 1, ]
} else if (num == "worst") {
r <- r[r$reverse == 1, ]
} else if (num == "all") {
} else {
r <- r[r$rank == as.numeric(num), ]
}
colnames(r[,c(7,2,outcome_id), 47, 48]) <- c("State", "Hospital", "Rate", "Rank", "Inv Rank")
r[,c(7,2,outcome_id,47,48)]
#r[,c(7,2,outcome_id)]
}
r <- rankall("heart attack", 4)
rankall <- function(outcome, num) {
## Read outcome data
## Check that state and outcome are valid
## Return hospital name is tha tstate with lowest 30 day death
## rate
# "heart attack" , "heart failure" and "pneumonia"
outcome_id = NULL
# check if outcome measure is valid
if (outcome == "heart attack") {
outcome_id = 11
} else if (outcome == "heart failure") {
outcome_id = 17
} else if ( outcome == "pneumonia") {
outcome_id = 23
} else {
stop ("Not a valid outcome measure")
}
# load relevant data
data <- read.csv("\\\\wbad.group\\dfs_WB\\10_Home\\UWBBENOELF\\DATA\\Desktop\\GIT Folder\\coursera\\coursera\\outcome-of-care-measures.csv", colClasses = "character")
suppressWarnings(data[,outcome_id] <- as.numeric(data[,outcome_id]))
# check if state is valid
if (is.na(match(state, data[,7]))) {
stop ("Not a valid state")
}
#filter by state and order the data ascending
data <- data[complete.cases(data[,outcome_id]),]
f_states <- levels(factor(data$State))
r <- NULL
for (s in f_states) {
t <- data[data$State == s,]
rank_v = order(t[,outcome_id])
t <- cbind(t[rank_v,], rank = 1:length(rank_v), length(rank_v):1)
if (is.null(r)) {
r <- t
} else {
r <- rbind(r, t)
}
}
#r[,c(7,2,outcome_id,47,48)]
#return results
if (num == "best") {
r <- r[r$rank == 1, ]
} else if (num == "worst") {
r <- r[r$reverse == 1, ]
} else if (num == "all") {
} else {
r <- r[r$rank == as.numeric(num), ]
}
colnames(r[,c(7,2,outcome_id), 47, 48]) <- c("State", "Hospital", "Rate", "Inv Rank")
r[,c(7,2,outcome_id,47,48)]
#r[,c(7,2,outcome_id)]
}
r <- rankall("heart attack", 4)
rankall <- function(outcome, num) {
## Read outcome data
## Check that state and outcome are valid
## Return hospital name is tha tstate with lowest 30 day death
## rate
# "heart attack" , "heart failure" and "pneumonia"
outcome_id = NULL
# check if outcome measure is valid
if (outcome == "heart attack") {
outcome_id = 11
} else if (outcome == "heart failure") {
outcome_id = 17
} else if ( outcome == "pneumonia") {
outcome_id = 23
} else {
stop ("Not a valid outcome measure")
}
# load relevant data
data <- read.csv("\\\\wbad.group\\dfs_WB\\10_Home\\UWBBENOELF\\DATA\\Desktop\\GIT Folder\\coursera\\coursera\\outcome-of-care-measures.csv", colClasses = "character")
suppressWarnings(data[,outcome_id] <- as.numeric(data[,outcome_id]))
# check if state is valid
if (is.na(match(state, data[,7]))) {
stop ("Not a valid state")
}
#filter by state and order the data ascending
data <- data[complete.cases(data[,outcome_id]),]
f_states <- levels(factor(data$State))
r <- NULL
for (s in f_states) {
t <- data[data$State == s,]
rank_v = order(t[,outcome_id])
t <- cbind(t[rank_v,], rank = 1:length(rank_v), length(rank_v):1)
if (is.null(r)) {
r <- t
} else {
r <- rbind(r, t)
}
}
#r[,c(7,2,outcome_id,47,48)]
#return results
if (num == "best") {
r <- r[r$rank == 1, ]
} else if (num == "worst") {
r <- r[r$reverse == 1, ]
} else if (num == "all") {
} else {
r <- r[r$rank == as.numeric(num), ]
}
colnames(r[,c(7,2,outcome_id, 47, 48)]) <- c("State", "Hospital", "Rate", "Inv Rank")
r[,c(7,2,outcome_id,47,48)]
#r[,c(7,2,outcome_id)]
}
r <- rankall("heart attack", 4)
r[r$State =="HI",]
rankall <- function(outcome, num) {
## Read outcome data
## Check that state and outcome are valid
## Return hospital name is tha tstate with lowest 30 day death
## rate
# "heart attack" , "heart failure" and "pneumonia"
outcome_id = NULL
# check if outcome measure is valid
if (outcome == "heart attack") {
outcome_id = 11
} else if (outcome == "heart failure") {
outcome_id = 17
} else if ( outcome == "pneumonia") {
outcome_id = 23
} else {
stop ("Not a valid outcome measure")
}
# load relevant data
data <- read.csv("\\\\wbad.group\\dfs_WB\\10_Home\\UWBBENOELF\\DATA\\Desktop\\GIT Folder\\coursera\\coursera\\outcome-of-care-measures.csv", colClasses = "character")
suppressWarnings(data[,outcome_id] <- as.numeric(data[,outcome_id]))
# check if state is valid
if (is.na(match(state, data[,7]))) {
stop ("Not a valid state")
}
#filter by state and order the data ascending
data <- data[complete.cases(data[,outcome_id]),]
f_states <- levels(factor(data$State))
r <- NULL
for (s in f_states) {
t <- data[data$State == s,]
rank_v = order(t[,outcome_id])
t <- cbind(t[rank_v,], rank = 1:length(rank_v), length(rank_v):1)
if (is.null(r)) {
r <- t
} else {
r <- rbind(r, t)
}
}
#r[,c(7,2,outcome_id,47,48)]
#return results
if (num == "best") {
r <- r[r$rank == 1, ]
} else if (num == "worst") {
r <- r[r$reverse == 1, ]
} else if (num == "all") {
} else {
r <- r[r$rank == as.numeric(num), ]
}
r <- r[,c(7,2,outcome_id, 47, 48)]
colnames(r) <- c("State", "Hospital", "Rate", "Inv Rank")
r
#r[,c(7,2,outcome_id)]
}
r <- rankall("heart attack", 4)
r[r$State =="HI",]
r <- rankall("pneumonia", "worst")
as.character(subset(r, state == "NJ")$Hospital)
as.character(subset(r, State == "NJ")$Hospital)
r[r$State == "NJ",]
r <- rankall("pneumonia", "worst")
r[r$State == "NJ",]
r <- rankall("pneumonia", "all")
r[r$State == "NJ",]
r[r$State == "NV",]
r <- rankall("heart failure", 10)
r[r$State == "NV",]
set.seed(1)
rpois(5, 2)
x <- rep(0:1, each = 5)
e <- rnorm(10, 0, 20)
y <- 0.5 + 2 * x + e
plot (y)
summary(bidlog$award_localdn_var)
boxplot(bidlog$award_localdn_var)
summary(bidlog$count_processing_days)
boxplot(bidlog$count_processing_days, col="green")
rug(bidlog$count_processing_days)
hist(bidlog$count_processing_days, col = "red")
rug(bidlog$count_processing_days)
hist(bidlog$count_processing_days, col = "red", breaks = 100)
hist(bidlog$award_localdn_var, col = "red")
hist(bidlog$award_localdn_var, col = "red", breaks = 100)
hist(bidlog$award_localdn_var, col = "red", breaks = 200)
hist(bidlog$award_localdn_var, col = "red", breaks = 300)
rug(bidlog$award_localdn_var)
boxplot(bidlog$count_processing_days, col="green")
abline(12)
abline(h = 12)
abline(h = 25)
hist(bidlog$count_processing_days, col = "red", breaks = 100)
rug(bidlog$count_processing_days)
abline(v=median(bidlog$count_processing_days)), col ="magenta", lwd = 4)
abline(v=median(bidlog$count_processing_days)), col ="magenta", lwd = 4)
abline(v=median(bidlog$count_processing_days), col ="magenta", lwd = 4)
hist(bidlog$count_processing_days, col = "red", breaks = 100)
abline(v=median(bidlog$count_processing_days), col ="magenta", lwd = 4)
abline(v=median(bidlog$count_processing_days), col ="black", lwd = 4)
summary(bidlog$count_processing_days)
barplot(table(bidlog$member), col="wheat", main = "Number of bids per Member")
for (i in levels(factor(bidlog$open_date_cy))) {
summary(bidlog[bidlog$open_date_cy == i]$count_processing_days)
}
for (i in levels(factor(bidlog$open_date_cy))) {
summary(bidlog[bidlog$open_date_cy == i,]$count_processing_days)
}
for (i in levels(factor(bidlog$open_date_cy))) {
a <- c(a, summary(bidlog[bidlog$open_date_cy == i,]$count_processing_days))
}
a
levels(factor(bidlog$open_date_cy))
for (i in levels(factor(bidlog$open_date_cy))) {
print(summary(bidlog[bidlog$open_date_cy == i,]$count_processing_days))
}
plot(bidlog[bidlog$open_date_cy > 2015,]$open_date_cy)
plot(bidlog[bidlog$open_date_cy > 2015,]$count_processing_days)
hist(bidlog[bidlog$open_date_cy > 2015,]$count_processing_days)
hist(bidlog[bidlog$open_date_cy > 2015,]$count_processing_days, breaks = 100)
hist(bidlog[bidlog$open_date_cy > 2015 & bidlog$count_processing_days > 0,]$count_processing_days, breaks = 100)
hist(bidlog[bidlog$open_date_cy = 2016 & bidlog$count_processing_days > 0,]$count_processing_days, breaks = 100)
hist(bidlog[bidlog$open_date_cy == 2016 & bidlog$count_processing_days > 0,]$count_processing_days, breaks = 100)
hist(bidlog[bidlog$open_date_cy == 2017 & bidlog$count_processing_days > 0,]$count_processing_days, breaks = 100)
boxplot(bidlog$count_processing_days ~ data$reason, col="red")
boxplot(count_processing_days ~ reason, data = data, col="red")
data <- bidlog[bidlog$open_date_cy == 2016 & bidlog$count_processing_days > 0,]
boxplot(bidlog$count_processing_days ~ data$reason, col="red")
boxplot(data$count_processing_days ~ data$reason, col="red")
abline(h=21)
abline(h=14)
boxplot(data$count_processing_days ~ data$reason, col="red", las = 1)
boxplot(data$count_processing_days ~ data$reason, col="red", las = 1, horizontal = TRUE)
boxplot(data$count_processing_days ~ data$reason, col="red", las = 1, horizontal = TRUE, cex.axis = 0.7)
op <- par(mar = c(5, 10, 4, 2) + 0.1)
par(op)
op <- par(mar = c(5, 10, 4, 2) + 0.1)
par(op)
boxplot(data$count_processing_days ~ data$reason, col="red", las = 1, horizontal = TRUE, cex.axis = 0.7)
boxplot(data$count_processing_days ~ data$reason, col="red", las = 2, horizontal = TRUE, cex.axis = 0.7)
op <- par(mar = c(5, 25, 4, 2) + 0.1)
par(op)
boxplot(data$count_processing_days ~ data$reason, col="red", las = 2, horizontal = TRUE, cex.axis = 0.7)
par(mar = c(5, 25, 4, 2) + 0.1)
boxplot(data$count_processing_days ~ data$reason, col="red", las = 2, horizontal = TRUE, cex.axis = 0.7)
par(mar = c(5, 10, 4, 2) + 0.1)
boxplot(data$count_processing_days ~ data$reason, col="red", las = 2, horizontal = TRUE, cex.axis = 0.7)
data <- bidlog[bidlog$open_date_cy == 2017 & bidlog$count_processing_days > 0,]
par(mar = c(5, 10, 4, 2) + 0.1)
boxplot(data$count_processing_days ~ data$reason, col="red", las = 2, horizontal = TRUE, cex.axis = 0.7)
summary(data$count_processing_days)
summary(data[data$reason=="minibid", ]$count_processing_days)
summary(data[data$reason=="MINIBID", ]$count_processing_days)
(data$count_processing_days ~ data$reason, col="red", las = 2, horizontal = TRUE, cex.axis = 0.7, main="Count Processing Days per Reason")
hist(data$reason, col="red", las = 2, horizontal = TRUE, cex.axis = 0.7, main="Count Processing Days per Reason")
barplot(data$reason, col="red", las = 2, horizontal = TRUE, cex.axis = 0.7, main="Count Processing Days per Reason")
barplot(table(data$reason), col="red", las = 2, horizontal = TRUE, cex.axis = 0.7, main="Count Processing Days per Reason")
par(mar = c(5, 10, 4, 2) + 0.1)
boxplot(data$count_processing_days ~ data$reason, col="wheat", las = 2, horizontal = TRUE, cex.axis = 0.7, main="Count Processing Days per Reason")
barplot(table(data$reason), col="green", las = 2, horizontal = TRUE, cex.axis = 0.7, main="Count Bids per Reason - 2017")
par(mar = c(5, 10, 4, 2) + 0.1)
boxplot(data$count_processing_days ~ data$reason, col="wheat", las = 2, horizontal = TRUE, cex.axis = 0.7, main="Count Processing Days per Reason")
barplot(table(data$reason), col="gray", las = 2, horizontal = TRUE, cex.axis = 0.7, main="Count Bids per Reason - 2017")
barplot(table(data$reason), col="gray", las = 1, horizontal = TRUE, cex.axis = 0.7, main="Count Bids per Reason - 2017")
barplot(table(data$reason), col="gray", las = 2, vertical = TRUE, cex.axis = 0.7, main="Count Bids per Reason - 2017")
barplot(table(data$reason), col="gray", las = 2, horizontal = FALSE, cex.axis = 0.7, main="Count Bids per Reason - 2017")
barplot(table(data$reason), col="gray", las = 2, horizontal = FALSE, cex.axis = 0.7, main="Count Bids per Reason - 2017")
barplot(table(data$reason), col="gray", las = 2, horizontal = TRUE, cex.axis = 0.7, main="Count Bids per Reason - 2017")
par(mar = c(5, 10, 4, 2) + 0.1)
boxplot(data$count_processing_days ~ data$reason, col="wheat", las = 2, horizontal = TRUE, cex.axis = 0.7, main="Count Processing Days per Reason")
par(mar = c(5, 5, 4, 2) + 0.1)
barplot(table(data$reason), col="gray", las = 2, horizontal = TRUE, cex.axis = 0.7, main="Count Bids per Reason - 2017")
barplot(table(data$reason), col="gray", las = 2, horiz = TRUE, cex.axis = 0.7, main="Count Bids per Reason - 2017")
par(mar = c(5, 15, 4, 2) + 0.1)
barplot(table(data$reason), col="gray", las = 2, horiz = TRUE, cex.axis = 0.7, main="Count Bids per Reason - 2017")
par(mar = c(5, 10, 4, 2) + 0.1)
boxplot(data$count_processing_days ~ data$reason, col="wheat", las = 2, horizontal = TRUE, cex.axis = 0.7, main="Count Processing Days per Reason")
par(mar = c(5, 15, 4, 2) + 0.1)
barplot(table(data$reason), col="gray", las = 2, horiz = TRUE, cex.axis = 0.7, main="Count Bids per Reason - 2017")
par(mar = c(5, 15, 4, 2) + 0.1)
boxplot(data$count_processing_days ~ data$reason, col="wheat", las = 2, horizontal = TRUE,  main="Count Processing Days per Reason")
par(mar = c(5, 15, 4, 2) + 0.1)
barplot(table(data$reason), col="gray", las = 2, horiz = TRUE, cex.axis = 0.7, main="Count Bids per Reason - 2017")
barplot(table(data[data$bid_status=="PENDING" || data$bid_status=="CLOSED"]$reason), col="gray", las = 2, horiz = TRUE, cex.axis = 0.7, main="Count Bids per Reason - 2017")
hist(subset(data, member=="ABC")$count_processing_days, col = "green")
hist(subset(data, member=="WAG")$count_processing_days, col = "green")
head(data)
plot(subset(data, bid_owner == "Marc_Friolet")$count_processing_days
)
boxplot(subset(data, bid_owner == "Marc_Friolet")$count_processing_days
boxplot(subset(data, bid_owner == "Marc_Friolet")$count_processing_days)
boxplot(subset(data, bid_owner == "Marc_Friolet")$count_processing_days)
boxplot(subset(data, bid_owner == "Marc_Friolet")$count_processing_days ~ subset(data, bid_owner == "Marc_Friolet")$member)
levels(data$bid_owner)
boxplot(subset(data, bid_owner == "Mike_Osinski")$count_processing_days ~ subset(data, bid_owner == "Mike_Osinski")$member)
boxplot(subset(data, bid_owner == c("Mike_Osinski","Marc_Friolet") )$count_processing_days ~ subset(data, bid_owner == c("Mike_Osinski","Marc_Friolet"))$member)
boxplot(subset(data, bid_owner == "Mike_Osinski")$count_processing_days ~ subset(data, bid_owner == "Mike_Osinski")$member)
boxplot(subset(data, bid_owner == "Marc_Friolet")$count_processing_days ~ subset(data, bid_owner == "Marc_Friolet")$member)
boxplot(subset(data, bid_owner == "Mike_Osinski")$count_processing_days ~ subset(data, bid_owner == "Mike_Osinski")$member)
with(data, plot(count_processing_days, reason, col =member))
with(data, plot(count_processing_days, award_localdn_var, col =member))
par(mfrow = c(1,2), mar = c(5, 4, 2, 1))
boxplot(subset(data, bid_owner == "Marc_Friolet")$count_processing_days ~ subset(data, bid_owner == "Marc_Friolet")$member)
boxplot(subset(data, bid_owner == "Mike_Osinski")$count_processing_days ~ subset(data, bid_owner == "Mike_Osinski")$member)
par(mfrow = c(1,2), mar = c(5, 4, 2, 1))
boxplot(subset(data, bid_owner == "Marc_Friolet")$count_processing_days ~ subset(data, bid_owner == "Marc_Friolet")$member, main = "MF")
boxplot(subset(data, bid_owner == "Mike_Osinski")$count_processing_days ~ subset(data, bid_owner == "Mike_Osinski")$member, main = "MO")
par(mfrow = c(1,2), mar = c(5, 4, 2, 1))
boxplot(subset(data, bid_owner == "Marc_Friolet")$count_processing_days ~ subset(data, bid_owner == "Marc_Friolet")$member, main = "MF", ylim = c(0, 40))
boxplot(subset(data, bid_owner == "Mike_Osinski")$count_processing_days ~ subset(data, bid_owner == "Mike_Osinski")$member, main = "MO", ylim = c(0, 40))
boxplot(subset(data, bid_owner == "Marc_Friolet")$count_processing_days ~ subset(data, bid_owner == "Marc_Friolet" & member == c("ABC", "WAG"))$member, main = "MF", ylim = c(0, 40))
boxplot(subset(data, bid_owner == "Marc_Friolet" & member == c("ABC", "WAG"))$count_processing_days ~ subset(data, bid_owner == "Marc_Friolet" & member == c("ABC", "WAG"))$member, main = "MF", ylim = c(0, 40))
boxplot(subset(data, bid_owner == "Mike_Osinski")$count_processing_days ~ subset(data, bid_owner == "Mike_Osinski")$member, main = "MO", ylim = c(0, 40))
boxplot(subset(data, bid_owner == "Mike_Osinski" & member == c("ABC", "WAG"))$count_processing_days ~ subset(data, bid_owner == "Mike_Osinski" & member == c("ABC", "WAG"))$member, main = "MO", ylim = c(0, 40))
boxplot(subset(data, bid_owner == "Marc_Friolet")$count_processing_days ~ subset(data, bid_owner == "Marc_Friolet")$member, main = "MF", ylim = c(0, 40))
boxplot(subset(data, bid_owner == "Mike_Osinski")$count_processing_days ~ subset(data, bid_owner == "Mike_Osinski")$member, main = "MO", ylim = c(0, 40))
par(mfrow = c(1,2), mar = c(5, 4, 2, 1))
boxplot(subset(data, bid_owner == "Marc_Friolet")$count_processing_days ~ subset(data, bid_owner == "Marc_Friolet")$member, main = "MF", ylim = c(0, 40))
boxplot(subset(data, bid_owner == "Mike_Osinski")$count_processing_days ~ subset(data, bid_owner == "Mike_Osinski")$member, main = "MO", ylim = c(0, 40))
data <- bidlog[bidlog$open_date_cy == 2017 & bidlog$count_processing_days > 0 & bidlog$member == c("ABC", "WAG"),]
par(mfrow = c(1,2), mar = c(5, 4, 2, 1))
boxplot(subset(data, bid_owner == "Marc_Friolet")$count_processing_days ~ subset(data, bid_owner == "Marc_Friolet")$member, main = "MF", ylim = c(0, 40))
boxplot(subset(data, bid_owner == "Mike_Osinski")$count_processing_days ~ subset(data, bid_owner == "Mike_Osinski")$member, main = "MO", ylim = c(0, 40))
par(mfcol = c(1,2), mar = c(5, 4, 2, 1))
hist(subset(data, bid_owner == "Marc_Friolet")$member, main = "MF")
barplot(table(subset(data, bid_owner == "Marc_Friolet")$member), main = "MF")
par(mfrow = c(1,2), mar = c(5, 4, 2, 1))
barplot(table(subset(data, bid_owner == "Marc_Friolet")$member), main = "MF")
barplot(table(subset(data, bid_owner == "Mike_Osinski")$member), main = "MO")
