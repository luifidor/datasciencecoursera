hist(wag_m)
hist(as.numeric(abc$ABC_Discount))
hist(as.numeric(WAG$WAG_Discount))
hist(as.numeric(wag_m$WAG_Discount))
hist(as.numeric(abc$ABC_Discount))
summary (as.numeric(abc_m$ABC_Discount))
hist(as.numeric(abc_m$ABC_Discount))
bidlog_statistics <- read.csv("~/WBADev/Box Sync/WBAD Generics Workstream/Analytics/ad-hoc/Noel/012_bidlog_statistics_analysis/bidlog_statistics.csv", sep=";")
View(bidlog_statistics)
minibid <- bidlog_statistics[which(bidlog_statistics$reason=="MINIBID"),]
hist(minibid$processing_time)
hist(as.numeric(minibid$processing_time))
hist(as.numeric(minibid$processing_days))
minibid_jul <- bidlog_statistics[which(bidlog_statistics$reason=="MINIBID" & bidlog_statistics$open_month = "Jul-15"),]
minibid_jul <- bidlog_statistics[which(bidlog_statistics$reason=="MINIBID" & bidlog_statistics$open_month == "Jul-15"),]
minibid_aug <- bidlog_statistics[which(bidlog_statistics$reason=="MINIBID" & bidlog_statistics$open_month == "Aug-15"),]
minibid_sep <- bidlog_statistics[which(bidlog_statistics$reason=="MINIBID" & bidlog_statistics$open_month == "Sep-15"),]
hist(as.numeric(minibid$processing_days))
hist(as.numeric(minibid_jul$processing_days))
hist(as.numeric(minibid_aug$processing_days))
hist(as.numeric(minibid_sep$processing_days))
hist(as.numeric(minibid_jul$processing_days), xlim=c(5,50), breaks=10)
hist(as.numeric(minibid_jul$processing_days), xlim=c(0,50), breaks=10)
hist(as.numeric(minibid_jul$processing_days), ylim (0, 30), prob = TRUE, xlim=c(0,50), breaks=10)
hist(as.numeric(minibid_jul$processing_days), ylim=c(0, 30), prob = TRUE, xlim=c(0,50), breaks=10)
hist(as.numeric(minibid_jul$processing_days), prob = TRUE, xlim=c(0,50), breaks=10)
hist(as.numeric(minibid_jul$processing_days), prob = TRUE, ylim=c(0,0.15), xlim=c(0,50), breaks=10)
hist(as.numeric(minibid_aug$processing_days), prob = TRUE, ylim=c(0,0.15), xlim=c(0,50), breaks=10)
hist(as.numeric(minibid_sep$processing_days), prob = TRUE, ylim=c(0,0.15), xlim=c(0,50), breaks=10)
hist(as.numeric(minibid_sep$processing_days), prob = TRUE, ylim=c(0,0.25), xlim=c(0,50), breaks=10)
hist(as.numeric(minibid_jul$processing_days), prob = TRUE, ylim=c(0,0.25), xlim=c(0,50), breaks=10)
hist(as.numeric(minibid_aug$processing_days), prob = TRUE, ylim=c(0,0.25), xlim=c(0,50), breaks=10)
hist(as.numeric(minibid_sep$processing_days), prob = TRUE, ylim=c(0,0.25), xlim=c(0,50), breaks=10)
hist(as.numeric(minibid_jul$processing_days), prob = TRUE, ylim=c(0,0.25), xlim=c(0,50), breaks=10)
hist(as.numeric(minibid_aug$processing_days), prob = TRUE, ylim=c(0,0.25), xlim=c(0,50), breaks=10)
hist(as.numeric(minibid_sep$processing_days), prob = TRUE, ylim=c(0,0.25), breaks=10)
hist(as.numeric(minibid_sep$processing_days), prob = TRUE, ylim=c(0,0.25), xlim=c(0,50), breaks=10, las=1)
hist(as.numeric(minibid_sep$processing_days), prob = TRUE, ylim=c(0,0.25), xlim=c(0,50),las=1)
hist(as.numeric(minibid_aug$processing_days), prob = TRUE, ylim=c(0,0.25), xlim=c(0,50),las=1)
hist(as.numeric(minibid_jul$processing_days), prob = TRUE, ylim=c(0,0.25), xlim=c(0,50),las=1)
hist(as.numeric(minibid_jul$processing_days), prob = TRUE, ylim=c(0,0.15), xlim=c(0,40),las=1)
hist(as.numeric(minibid_aug$processing_days), prob = TRUE, ylim=c(0,0.15), xlim=c(0,40),las=1)
hist(as.numeric(minibid_sep$processing_days), prob = TRUE, ylim=c(0,0.15), xlim=c(0,40),las=1)
hist(as.numeric(minibid_jul$processing_days), prob = TRUE, ylim=c(0,0.15), xlim=c(0,50),las=1)
hist(as.numeric(minibid_aug$processing_days), prob = TRUE, ylim=c(0,0.15), xlim=c(0,50),las=1)
hist(as.numeric(minibid_sep$processing_days), prob = TRUE, ylim=c(0,0.15), xlim=c(0,50),las=1)
hist(as.numeric(minibid_jul$processing_days)
main="MINIBID - Processing days distribution (days)", prob = TRUE, ylim=c(0,0.15), xlim=c(0,50),las=1)
hist(as.numeric(minibid_jul$processing_days,
main="MINIBID - Processing days distribution (days)", prob = TRUE, ylim=c(0,0.15), xlim=c(0,50),las=1)
hist(as.numeric(minibid_jul$processing_days, main="MINIBID - Processing days distribution (days)", prob = TRUE, ylim=c(0,0.15), xlim=c(0,50),las=1)
hist(as.numeric(minibid_jul$processing_days, main="MINIBID - Processing days distribution (days)", prob = TRUE, ylim=c(0,0.15), xlim=c(0,50),las=1)
hist(as.numeric(minibid_aug$processing_days), prob = TRUE, ylim=c(0,0.15), xlim=c(0,50),las=1)
hist(as.numeric(minibid_jul$processing_days, main="MINIBID - Processing days distribution (days)", prob = TRUE, ylim=c(0,0.15), xlim=c(0,50),las=1)
hist(as.numeric(minibid_aug$processing_days), prob = TRUE, ylim=c(0,0.15), xlim=c(0,50),las=1)
hist(as.numeric(minibid_jul$processing_days, main="MINIBID - Processing days distribution days", prob = TRUE, ylim=c(0,0.15), xlim=c(0,50),las=1)
hist(as.numeric(minibid_jul$processing_days, main = "MINIBID - Processing days distribution days", prob = TRUE, ylim=c(0,0.15), xlim=c(0,50),las=1)
hist(as.numeric(minibid_jul$processing_days), main = "MINIBID - Processing days distribution days", prob = TRUE, ylim=c(0,0.15), xlim=c(0,50),las=1)
hist(as.numeric(minibid_aug$processing_days), prob = TRUE, ylim=c(0,0.15), xlim=c(0,50),las=1)
hist(as.numeric(minibid_jul$processing_days), main = "MINIBID - Processing days distribution days", prob = TRUE, ylim=c(0,0.15), xlim=c(0,50),las=1)
prob = TRUE, ylim=c(0,0.15), xlim=c(0,50),las=1, xlab="Days")
hist(as.numeric(minibid_jul$processing_days), main = "MINIBID - Bid processing time (days) - July", prob = TRUE, ylim=c(0,0.15), xlim=c(0,50),las=1, xlab="Days")
hist(as.numeric(minibid_jul$processing_days), main = "MINIBID - Bid processing time (days) - July", prob = TRUE, ylim=c(0,0.15), xlim=c(0,50),las=1, xlab="Days to close bid")
hist(as.numeric(minibid_jul$processing_days), main = "MINIBID - Bid processing time (days) - July", prob = TRUE, ylim=c(0,0.15), xlim=c(0,50),las=1, xlab="Days to close bid")
hist(as.numeric(minibid_aug$processing_days), main = "MINIBID - Bid processing time (days) - July", prob = TRUE, ylim=c(0,0.15), xlim=c(0,50),las=1, xlab="Days to close bid")
hist(as.numeric(minibid_sep$processing_days), main = "MINIBID - Bid processing time (days) - July", prob = TRUE, ylim=c(0
hist(as.numeric(minibid_sep$processing_days), main = "MINIBID - Bid processing time (days) September-15", prob = TRUE, ylim=c(0,0.15), xlim=c(0,50),las=1, xlab="Days to close bid")
hist(as.numeric(minibid_sep$processing_days), main = "MINIBID - Bid processing time (days) September-15", prob = TRUE, ylim=c(0,0.15), xlim=c(0,50),las=1, xlab="Days to close bid")
hist(as.numeric(minibid_jul$processing_days), main = "MINIBID - Bid processing time [Jul-15]", prob = TRUE, ylim=c(0,0.15), xlim=c(0,50),las=1, xlab="Days to close bid")
hist(as.numeric(minibid_aug$processing_days), main = "MINIBID - Bid processing time [Aug-15]", prob = TRUE, ylim=c(0,0.15), xlim=c(0,50),las=1, xlab="Days to close bid")
hist(as.numeric(minibid_sep$processing_days), main = "MINIBID - Bid processing time [Sep-15]", prob = TRUE, ylim=c(0,0.15), xlim=c(0,50),las=1, xlab="Days to close bid")
comp_jul <- bidlog_statistics[which(bidlog_statistics$reason=="COMPETITIVE" & bidlog_statistics$open_month == "Jul-15"),]
comp_aug <- bidlog_statistics[which(bidlog_statistics$reason=="COMPETITIVE" & bidlog_statistics$open_month == "Aug-15"),]
comp_sep <- bidlog_statistics[which(bidlog_statistics$reason=="COMPETITIVE" & bidlog_statistics$open_month == "Sep-15"),]
hist(as.numeric(comp_jul$processing_days), main = "Competitive - Bid processing time [Jul-15]", prob = TRUE, ylim=c(0,0.15), xlim=c(0,50),las=1, xlab="Days to close bid")
hist(as.numeric(comp_aug$processing_days), main = "Competitive - Bid processing time [Aug-15]", prob = TRUE, ylim=c(0,0.15), xlim=c(0,50),las=1, xlab="Days to close bid")
hist(as.numeric(comp_sep$processing_days), main = "Competitive - Bid processing time [Sep-15]", prob = TRUE, ylim=c(0,0.15), xlim=c(0,50),las=1, xlab="Days to close bid")
hist(as.numeric(comp_jul$processing_days), main = "Competitive - Bid processing time [Jul-15]", prob = TRUE, ylim=c(0,0.15), xlim=c(0,60),las=1, xlab="Days to close bid")
hist(as.numeric(comp_aug$processing_days), main = "Competitive - Bid processing time [Aug-15]", prob = TRUE, ylim=c(0,0.15), xlim=c(0,60),las=1, xlab="Days to close bid")
hist(as.numeric(comp_sep$processing_days), main = "Competitive - Bid processing time [Sep-15]", prob = TRUE, ylim=c(0,0.15), xlim=c(0,60),las=1, xlab="Days to close bid")
hist(as.numeric(comp_jul$processing_days), main = "Competitive - Bid processing time [Jul-15]", prob = TRUE, ylim=c(0,0.15), xlim=c(0,70),las=1, xlab="Days to close bid")
hist(as.numeric(comp_aug$processing_days), main = "Competitive - Bid processing time [Aug-15]", prob = TRUE, ylim=c(0,0.15), xlim=c(0,70),las=1, xlab="Days to close bid")
hist(as.numeric(comp_sep$processing_days), main = "Competitive - Bid processing time [Sep-15]", prob = TRUE, ylim=c(0,0.15), xlim=c(0,70),las=1, xlab="Days to close bid")
hist(as.numeric(comp_jul$processing_days), main = "Competitive - Bid processing time [Jul-15]", prob = TRUE, ylim=c(0,0.15), xlim=c(0,80),las=1, xlab="Days to close bid")
hist(as.numeric(comp_aug$processing_days), main = "Competitive - Bid processing time [Aug-15]", prob = TRUE, ylim=c(0,0.15), xlim=c(0,80),las=1, xlab="Days to close bid")
hist(as.numeric(comp_sep$processing_days), main = "Competitive - Bid processing time [Sep-15]", prob = TRUE, ylim=c(0,0.15), xlim=c(0,80),las=1, xlab="Days to close bid")
hist(as.numeric(comp_jul$processing_days), main = "Competitive - Bid processing time [Jul-15]", ylim=c(0,50), xlim=c(0,80),las=1, xlab="Days to close bid")
hist(as.numeric(comp_aug$processing_days), main = "Competitive - Bid processing time [Aug-15]", ylim=c(0,50), xlim=c(0,80),las=1, xlab="Days to close bid")
hist(as.numeric(comp_sep$processing_days), main = "Competitive - Bid processing time [Sep-15]", ylim=c(0,50), xlim=c(0,80),las=1, xlab="Days to close bid")
hist(as.numeric(minibid_jul$processing_days), main = "MINIBID - Bid processing time [Jul-15]", ylim=c(0,30), xlim=c(0,50),las=1, xlab="Days to close bid")
hist(as.numeric(minibid_aug$processing_days), main = "MINIBID - Bid processing time [Aug-15]", ylim=c(0,30), xlim=c(0,50),las=1, xlab="Days to close bid")
hist(as.numeric(minibid_sep$processing_days), main = "MINIBID - Bid processing time [Sep-15]", ylim=c(0,30), xlim=c(0,50),las=1, xlab="Days to close bid")
hist(as.numeric(minibid_jul$processing_days), main = "MINIBID - Bid processing time [Jul-15]", ylim=c(0,15), xlim=c(0,50),las=1, xlab="Days to close bid")
hist(as.numeric(minibid_aug$processing_days), main = "MINIBID - Bid processing time [Aug-15]", ylim=c(0,15), xlim=c(0,50),las=1, xlab="Days to close bid")
hist(as.numeric(minibid_sep$processing_days), main = "MINIBID - Bid processing time [Sep-15]", ylim=c(0,15), xlim=c(0,50),las=1, xlab="Days to close bid")
hist(as.numeric(minibid_sep$processing_days), main = "MINIBID - Bid processing time [Sep-15]", ylim=c(0,20), xlim=c(0,50),las=1, xlab="Days to close bid")
hist(as.numeric(minibid_jul$processing_days), main = "MINIBID - Bid processing time [Jul-15]", ylim=c(0,20), xlim=c(0,50),las=1, xlab="Days to close bid")
hist(as.numeric(minibid_aug$processing_days), main = "MINIBID - Bid processing time [Aug-15]", ylim=c(0,20), xlim=c(0,50),las=1, xlab="Days to close bid")
hist(as.numeric(minibid_sep$processing_days), main = "MINIBID - Bid processing time [Sep-15]", ylim=c(0,20), xlim=c(0,50),las=1, xlab="Days to close bid")
as.numeric(comp_jul$processing_days)
boxplot(as.numeric(comp_jul$processing_days))
print(mtcars)
boxplot(as.numeric(processing_days)~open_month, data=comp_jul)
boxplot(as.numeric(processing_days)~open_week, data=comp_jul)
boxplot(as.numeric(processing_days)~open_week, data=minibid)
boxplot(as.numeric(processing_days)~open_week, data=minibid, las=2)
comp <- bidlog_statistics[which(bidlog_statistics$reason=="COMPETITIVE"),]
boxplot(as.numeric(processing_days)~open_week, data=comp, las=2)
boxplot(as.numeric(processing_days)~open_week, main= toupper("Minibid processing days"), data=minibid, las=2)
boxplot(as.numeric(processing_days)~open_week, ylabel="Days", main= toupper("Minibid processing days"), data=minibid, las=2)
boxplot(as.numeric(processing_days)~open_week, ylabel="Days", main= toupper("Minibid processing days"), data=minibid, las=2)
boxplot(as.numeric(processing_days)~open_week, ylab="Days", main= toupper("Minibid processing days"), data=minibid, las=2)
boxplot(as.numeric(processing_days)~open_week, ylab="Days", main= toupper("Competitive processing days"), data=comp, las=2)
saving_statistics <- read.csv("~/WBADev/Box Sync/WBAD Generics Workstream/Analytics/ad-hoc/Noel/012_bidlog_statistics_analysis/saving_statistics.csv", sep=";")
View(saving_statistics)
hist(saving_statistics$diff)
hist(saving_statistics$diff, prob=true)
hist(saving_statistics$diff, prob = true)
hist(saving_statistics$diff, prob = TRUE)
hist(saving_statistics$diff)
hist(saving_statistics$diff, break=5)
hist(saving_statistics$diff, breaks=5)
bidlog27012015 <- read.csv("C:/Users/uwbbenoelf/Desktop/bidlog27012015.csv", sep=";")
View(bidlog27012015)
a<- bidlog27012015
a
hist(as.num(a$bilodg_variance_contract_ext))
hist(as.numeric(a$bilodg_variance_contract_ext))
hist(as.numeric(a$bilodg_variance_contract_ext) + breaks = 10)
hist(as.numeric(a$bilodg_variance_contract_ext), breaks = 10)
a(which(a$bidlog_variance_contract_ext <> "NA"))
a(which(a$bidlog_variance_contract_ext != "NA"))
which(a$bidlog_variance_contract_ext != "NA"))
which(a$bidlog_variance_contract_ext != "NA")
a[which(a$bidlog_variance_contract_ext != "NA"), ]
b <- a[which(a$bidlog_variance_contract_ext != "NA"), ]
hist(as.numeric(b$bilodg_variance_contract_ext), breaks = 10)
View(b)
bidlog27012015 <- read.csv("C:/Users/uwbbenoelf/Desktop/bidlog27012015.csv", sep=";", na.strings="")
View(bidlog27012015)
bidlog27012015 <- read.csv("C:/Users/uwbbenoelf/Desktop/bidlog27012015.csv", sep=";", na.strings="")
View(bidlog27012015)
a <- bidlog27012015
b <- a[which(a$bidlog_variance_contract_ext != "NA"), ]
hist(as.numeric(b$bilodg_variance_contract_ext), breaks = 10)
b <- b[which(as.numeric(b$bidlog_variance_contract_ext) > 0), ]
hist(as.numeric(b$bilodg_variance_contract_ext), breaks = 10)
hist(as.numeric(b$variance_contract_ext), breaks = 10)
hist(as.numeric(b$variance_contract_ext))
hist(as.numeric(b$variance_contract_ext), breaks = 5)
hist(as.numeric(b$variance_localdn_ext), breaks = 5)
bidlog_report_report <- read.csv("C:/WBADev/Box Sync/WBAD Generics Workstream/Analytics/ad-hoc/Noel/020_bidlog_statistics_report/bidlog_report_report.csv", sep=";")
View(bidlog_report_report)
a <- bidlog_report_report[9, 26:41]
a
view(a)
View(a)
View(a)
a <- bidlog_report_report[,1 26:41]
a <- bidlog_report_report[,1 & 26:41]
a
View(a)
View(a)
a <- bidlog_report_report[,26:41]
View(a)
View(a)
a <- bidlog_report_report[,c(1,26:41)]
cor(a)
a <- as.numeric(bidlog_report_report[,c(1,26:41)]
)
cor(as.numeric(a))
data.matrix(a)
b <- data.matrix(a)
cor(b)
a <- as.numeric(bidlog_report_report[,c(9,26:41)]
)
a <- bidlog_report_report[,c(9,26:41)]
b <- data.matrix(a)
cor(b)
View(bidlog_report_report)
a <- bidlog_report_report[,c(11,26:41)]
b <- data.matrix(a)
cor(b)
View(b)
cor(b$localdn_savings_rate, b$amp_ma3_off_dnac)
cor(b.localdn_savings_rate, b.amp_ma3_off_dnac)
cor(b[, localdn_savings_rate], b[ , amp_ma3_off_dnac])
View(b)
cor(b[, localdn_savings_rate], b[ , amp_ma3_off_dnac])
b[[amp_ma3_off_dnac]]
b[[localdn_savings_rate]]
b[localdn_savings_rate]
b[["localdn_savings_rate"]]
b[[1,"localdn_savings_rate"]]
b[["localdn_savings_rate"]]
b[1, "localdn_savings_rate"]
b[, "localdn_savings_rate"]
cor(b[, "localdn_savings_rate"], b[, "amp_ma3_off_dnac"]
)
cor(b[, "localdn_savings_rate"], b[, "amp_ma3_off_dnac"])
cor(b[, "localdn_savings_rate"], b[, "amp_ma3_off_dnac"])
b[, "amp_ma3_off_dnac"]
cor(b[, "localdn_savings_rate"], b[, "amp_ma3_off_dnac"], use="pairwise.complete.obs")
cor(b[, "localdn_savings_rate"], b[, "amp_ma6_off_dnac"], use="pairwise.complete.obs")
cor(b[, "localdn_savings_rate"], b[, "amp_off_dnac"], use="pairwise.complete.obs")
View(bidlog_statistics)
getwd()
getwd()
getwd()
setwd("//wbad.group/dfs_WB/10_Home/UWBBENOELF/DATA/Desktop/GIT Folder/coursera")
x <- 1
print(x)
x
x <- 1:20
y
x
1L
1 / inf
1 / Inf
x <- c(0.5, 0.6)
x
y<-c(true, 2)
y<-c(TRUE, 2)
Z
Y
y
as.numberic(c("a", "b", "c")=
as.numberic(c("a", "b", "c"))
as.numeric(c("a", "b", "c"))
y <- list(1, "a", TRUE, 1 + 3i)
y
m <- matrix(nrow = 2, ncol = 3)
m
dim(m)
m <- 1:10
dim(m) <- c(2,5)
m
x<-factor(c("YES", "NO", "YES", "YES", "NO"))
x
x<-factor(c("YES", "NO", "YES", "YES", "NO"))
x
## checks the count of items within that vector
table(x)
unclass(x)
x<-factor(c("YES", "NO", "YES", "YES", "NO"), levels=c("YES", "NO"))
x<-c(1,2,NA,4)
is.na(x)
x<-c(1,2,NA,NAN)
is.na(x)
is.nan(x)
x<-c(1,2,NA,NaN)
is.na(x)
is.nan(x)
x <- data.frame (foo = 1:4, bar = c(T, T, F, F))
X
x <- data.frame (foo = 1:4, bar = c(T, T, F, F))
x
nrow(x)
rcol(x)
nrow(x)
ncol(x)
## names
x<-1:3
names(x) <- c("foo", "bar", "do")
x
install.packages(“RODBC”)
install.packages("RODBC")
install.packages(“RODBC”)
install.packages("RODBC")
library("RODBC")
library(RODBC)
??RODBC
cn <- odbcDriverConnect(connection="Driver={SQL Server Native Client
11.0};server=tcp:swbbesqlp01.wbad.group,1434;database=minibid;UID=minibid;pwd=Wbad2016; trusted_connection=yes;")
cn <- odbcDriverConnect(connection="Provider=SQLOLEDB.1;Data Source=tcp:swbbesqlp01.wbad.group,1434;Initial Catalog=minibid;User ID=minibid;Password=Wbad2016; trusted_connection=yes;")
cn <- odbcDriverConnect(connection="Provider=SQLOLEDB.1;Data Source=tcp:swbbesqlp01.wbad.group,1434;Initial Catalog=minibid;User ID=minibid;Password=Wbad2016";)
cn <- odbcDriverConnect(connection="Provider=SQLOLEDB.1;Data Source=tcp:swbbesqlp01.wbad.group,1434;Initial Catalog=minibid;User ID=minibid;Password=Wbad2016;")
cn <- odbcDriverConnect(connection="Provider=SQLOLEDB.1;Data Source=tcp:swbbesqld01.wbad.group,1433;Initial Catalog=minibid;User ID=wbad_report;Password=Wbad2014;")
cn <- odbcDriverConnect(connection="Driver={SQL Server Native Client
11.0};server=swbbesqld01.wbad.group;database=minibid;trusted_connection=yes;")
cn <- odbcDriverConnect(connection="Driver={SQL Server Native Client
11.0};server=swbbesqld01.wbad.group;database=minibid;trusted_connection=yes;")
odbcDriverConnect("driver=SQL Server;server=swbbesqld01.wbad.group")
cn <-odbcDriverConnect("driver=SQL Server;server=swbbesqld01.wbad.group")
cn <-odbcDriverConnect("driver=SQL Server;server=swbbesqld01.wbad.group;database=minibid; uid=minibid_submit; pwd=Wbad2016")
dataFetchEUR <- sqlFetch(cn, 'fact.bidlog_all', colnames=FALSE,
rows_at_time=1000)
dataFetchEUR <- sqlFetch(cn, 'fact.bidlog', colnames=FALSE,
rows_at_time=1000)
bidlog <- sqlFetch(cn, 'vResellerSalesAmountEUR', colnames=FALSE,
rows_at_time=1000)
bidlog <- sqlFetch(cn, 'fact.bidlog', colnames=FALSE,
rows_at_time=1000)
View(bidlog)
View(dataFetchEUR)
hist(bidlog$award_localdn_var)
hist(bidlog$award_localdn_var, xlim=c(0,100e6), breaks = 7)
hist(bidlog$award_localdn_var, xlim=c(0,1000000), breaks = 7)
hist(as.numeric(bidlog$award_localdn_var), xlim=c(0,1000000), breaks = 7)
hist(as.numeric(bidlog$award_localdn_var), xlim=c(0,1000000), breaks = 5)
hist(as.numeric(bidlog$award_localdn_var), xlim=c(0,1000000), breaks = c(0, 1e6, 10e6, 50e6))
hist(as.numeric(bidlog$award_localdn_var), xlim=c(0,1000000), breaks = c(0, 1e6, 10e6, 50e6))
hist(as.numeric(bidlog$award_localdn_var), xlim=c(0,50e6), breaks = c(0, 1e6, 10e6, 50e6))
hist(as.numeric(bidlog$award_localdn_var), xlim=c(0,50e6), breaks = 5)
hist(as.numeric(bidlog$award_localdn_var))
hist(as.numeric(bidlog$award_localdn_var), breaks = 5)
hist(as.numeric(bidlog$award_localdn_var), breaks = 10)
hist(as.numeric(bidlog$award_localdn_var), xlim = c(0,2e+08) breaks = 10)
hist(as.numeric(bidlog$award_localdn_var), xlim = c(0,2e+08), breaks = 10)
hist(as.numeric(bidlog$award_localdn_var), xlim = c(0,1e+08), breaks = 10)
hist(as.numeric(bidlog$award_localdn_var), xlim = c(0,1e+06), breaks = 10)
hist(as.numeric(bidlog$localdn_savings_rate), breaks = 10)
hist(as.numeric(bidlog$localdn_savings_rate), breaks = 3)
hist(as.numeric(bidlog$localdn_savings_rate), breaks = 2)
hist(as.numeric(bidlog$count_processing_days), breaks = 7)
hist(as.numeric(bidlog$count_processing_days), xlim=c(0,30),breaks = 7)
hist(as.numeric(bidlog[bidlog$count_processing_days < 50, ]$count_processing_days))
hist(as.numeric(bidlog[bidlog$count_processing_days < 50 || bidlog$close_date_cy == 2016, ]$count_processing_days))
hist(as.numeric(bidlog[bidlog$count_processing_days < 50  bidlog$close_date_cy == 2016, ]$count_processing_days))
hist(as.numeric(bidlog[bidlog$count_processing_days < 50 && bidlog$close_date_cy == 2016, ]$count_processing_days))
hist(as.numeric(bidlog[bidlog$count_processing_days < 50 && bidlog$close_date_cy == 2016, ]$count_processing_days))
hist(as.numeric(bidlog[(bidlog$count_processing_days < 50 && bidlog$close_date_cy == 2016), ]$count_processing_days))
hist(as.numeric(bidlog[(bidlog$count_processing_days < 50 & bidlog$close_date_cy == 2016), ]$count_processing_days))
hist(as.numeric(bidlog[(bidlog$count_processing_days < 50 & bidlog$close_date_cy == 2017), ]$count_processing_days))
hist(as.numeric(bidlog[(bidlog$count_processing_days < 50 & bidlog$close_date_cy == 2015), ]$count_processing_days), probability = TRUE)
hist(as.numeric(bidlog[(bidlog$count_processing_days < 50 & bidlog$close_date_cy == 2016), ]$count_processing_days), probability = TRUE)
hist(as.numeric(bidlog[(bidlog$count_processing_days < 50 & bidlog$close_date_cy == 2017), ]$count_processing_days), probability = TRUE)
hist(as.numeric(bidlog[(bidlog$count_processing_days < 100 & bidlog$close_date_cy == 2015), ]$count_processing_days), probability = TRUE)
source('//wbad.group/dfs_WB/10_Home/UWBBENOELF/DATA/Desktop/GIT Folder/coursera/coursera/r-programming-script.R', echo=TRUE)
hist(as.numeric(bidlog[(bidlog$count_processing_days < 100 & bidlog$close_date_cy == 2015), ]$count_processing_days), ylim=c(0, 0.04), probability = TRUE)
hist(as.numeric(bidlog[(bidlog$count_processing_days < 100 & bidlog$close_date_cy == 2015), ]$count_processing_days), ylim=c(0, 0.04), probability = TRUE)
hist(as.numeric(bidlog[(bidlog$count_processing_days < 100 & bidlog$close_date_cy == 2016), ]$count_processing_days), ylim=c(0, 0.04) probability = TRUE)
hist(as.numeric(bidlog[(bidlog$count_processing_days < 100 & bidlog$close_date_cy == 2017), ]$count_processing_days),  ylim=c(0, 0.04)probability = TRUE)
hist(as.numeric(bidlog[(bidlog$count_processing_days < 100 & bidlog$close_date_cy == 2015), ]$count_processing_days), ylim=c(0, 0.04), probability = TRUE)
hist(as.numeric(bidlog[(bidlog$count_processing_days < 100 & bidlog$close_date_cy == 2016), ]$count_processing_days), ylim=c(0, 0.04), probability = TRUE)
hist(as.numeric(bidlog[(bidlog$count_processing_days < 100 & bidlog$close_date_cy == 2017), ]$count_processing_days),  ylim=c(0, 0.04), probability = TRUE)
hist(as.numeric(bidlog[(bidlog$count_processing_days < 100 & bidlog$close_date_cy == 2015), ]$count_processing_days), ylim=c(0, 0.05), probability = TRUE)
hist(as.numeric(bidlog[(bidlog$count_processing_days < 100 & bidlog$close_date_cy == 2016), ]$count_processing_days), ylim=c(0, 0.05), probability = TRUE)
hist(as.numeric(bidlog[(bidlog$count_processing_days < 100 & bidlog$close_date_cy == 2017), ]$count_processing_days),  ylim=c(0, 0.05), probability = TRUE)
dput(bidlog)
x<-c(1, 2, NA, 4, NA, 5)
Y<-c("a","b",NA,"d", NA, "f")
good <- complete.cases(x,y)
good
x[good]
y[good]
x<-c(1, 2, NA, 4, NA, 5)
Y<-c("a","b",NA,"d", NA, "f")
good <- complete.cases(x,y)
good
x[good]
y[good]
x<-c(1, 2, NA, 4, NA, 5)
Y<-c("a","b",NA,"d", NA, "f")
good <- complete.cases(x,y)
x<-c(1, 2, NA, 4, NA, 5)
Y<-c("a","b",NA,"d", NA, "f")
good <- complete.cases(x,y)
len(x)
count(x)
length(x)
length(y)
Y<-c("a","b",NA,"d", NA, "f")
length(y)
y
Y<-c("a","b",NA,"d", NA, "f")
y
y<-c("a","b",NA,"d", NA, "f")
good <- complete.cases(x,y)
good
x[good]
y[good]
length(bidlog[1,])
length(bidlog)
bidlog <- sqlFetch(cn, 'fact.bidlog', colnames=FALSE,
rows_at_time=1000)
length(bidlog)
length(bidlog[1])
length(bidlog[1,])
c(4, TRUE)
x <- list(2, "a", "b", TRUE).
x <- list(2, "a", "b", TRUE)
x[[2]]
x <- 1:4
y <- 2
x+y
x <- c(3, 5, 1, 10, 12, 6)
x[x < 6] <- 0
x
read.table(hw1_data.csv)
getpwd
getpwd()
getpd()
getwd()
read.table(hw1_data.csv)
read.table(hw1_data.csv)
getwd()
read.table(hw1_data.csv)
read.table("hw1_data.csv")
read.csv("hw1_data.csv")
x <- read.csv("hw1_data.csv")
x <- read.csv("hw1_data.csv")
is.na(x$Ozone)
is.na(x$Ozone) == TRUE
t <- is.na(x$Ozone)
t
t[==TRUE]
X
X
is.na(x$Ozone) == TRUE
sum(is.na(x$Ozone))
rle(is.na(x$Ozone))
rle(is.na(x))
rle(is.na(x))
rle(is.na(x))
x[!is.na(x$Ozone),]
x[!is.na(x$Ozone),]$Ozone
mean(x[!is.na(x$Ozone),]$Ozone)
x[!is.na(x$Ozone) & !is.na(x$Temp) & x$Ozone > 31 & x$Temp > 90,]$Solar.R
mean(x[!is.na(x$Ozone) & !is.na(x$Temp) & x$Ozone > 31 & x$Temp > 90,]$Solar.R)
mean(x[!is.na(x$Temp) & x$Month ==6,]$Temp)
max(x[!is.na(x$Ozone) & x$Month ==5,]$Temp)
max(x[!is.na(x$Ozone) & x$Month ==5,]$Ozone)
install.packages("swirl")
install_from_swirl("R Programming")
library(swirl)
install.packages(Rcurl)
"RCurl"
install.packages(rcurl)
install.packages(RCurl)
library(swirl)
install.packages("rcurl")
y
install.packages("RCurl")
library(swirl)
install.packages("swirl")
library(swirl)
library(RCurl)
install.packages("RCurl")
if(x > 3) {
y <- 10
} else {
y <- 0
}
x <- 2
if(x > 3) {
y <- 10
} else {
y <- 0
}
x <- 2
if(x > 3) {
y <- 10
} else {
y <- 0
}
y
x <- 5
if(x > 3) {
y <- 10
} else {
y <- 0
}
y
x<-c("a", "b", "c", "d")
for (i in seq_along(x)) {
print(x[i])
}
## for loops matrix
x<-matrix(1:6, 2, 3)
for (i in seq_len(nrow(x))) {
for (j in seq_len(ncol(x))) {
print(x[i,j])
}
}
# while loop
count <- 0
while (count < 10) {
print(count)
count <- count + 1
}
add2 <- function(x,y) {
x + y
}
add2 (2, 3)
above <- function(x, y) {
use <- x > y
x[use]
}
above (c(10, 2, 4, 5), 4)
columnmean <- function (y) {
nc <- ncol(y)
means <- numeric(nc)
for (i in 1:nc) {
means[i] <- mean(y[, i])
}
means
}
x<-matrix(1:6, 2, 3)
columnmean(x)
columnmean(bidlog)
columnmean <- function (y, removeNA = TRUE) {
nc <- ncol(y)
means <- numeric(nc)
for (i in 1:nc) {
means[i] <- mean(y[, i], na.rm = removeNA)
}
means
}
columnmean(bidlog)
columnmean(bidlog$award_localdn_var)
columnmean(bidlog$award_localdn_var)
